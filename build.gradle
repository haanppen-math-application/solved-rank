plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
}

group = 'kr.co.hpmath.solver'
version = '0.0.1'

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    // check style
    apply plugin: 'checkstyle'

    tasks.withType(Checkstyle) {
        reports {
            xml.required = true
            html.required = true
        }
    }

    checkstyleMain.source = fileTree('src/main/java')

    checkstyle {
        configFile = rootProject.file("checkstyle/naver-checkstyle-rules.xml")
        configProperties = [
                "suppressionFile":
                        rootProject.file("checkstyle/naver-checkstyle-suppressions.xml").absolutePath
        ]
    }

    checkstyleTest.enabled = false
}

// Domain 하위의 모든 모듈들에 JaCoCo 적용
configure(subprojects.findAll { it.path.startsWith(':domain') }) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.13"
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            csv.required = false
            html.outputLocation = file("${project.buildDir}/reports/jacoco/html")
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.6
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.6
                }
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.6
                }
            }
        }
    }

    test {
        finalizedBy jacocoTestReport
    }
}